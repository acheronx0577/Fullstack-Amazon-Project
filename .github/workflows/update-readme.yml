name: 📚 Update README with Daily Fact

on:
  schedule:
    - cron: "0 16 * * *"
  workflow_dispatch:

jobs:
  update-readme:
    name: 🗓️ Update Daily Fact
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout repository
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT || github.token }}
          fetch-depth: 0

      # Step 2: Setup Git configuration
      - name: ⚙️ Setup Git Identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global pull.rebase false

      # Step 3: Sync with remote
      - name: 🔄 Sync with Remote
        run: |
          echo "🔄 Pulling latest changes from remote..."
          git pull origin main
          echo "✅ Successfully synced with remote"

      # Step 4: Get current date information
      - name: 📅 Get Current Date
        id: date
        run: |
          echo "date_slash=$(date +'%m/%d')" >> $GITHUB_OUTPUT
          echo "date_display=$(date +'%B %d')" >> $GITHUB_OUTPUT
          echo "iso_date=$(date -u +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "weekday=$(date +'%A')" >> $GITHUB_OUTPUT

      # Step 5: Fetch daily fact from API (FIXED)
      - name: 🌐 Fetch Daily Fact
        id: fact
        run: |
          set +e
          echo "🎯 Fetching fact for date: ${{ steps.date.outputs.date_slash }}"
          
          # Install jq if not present (should be available in ubuntu-latest)
          if ! command -v jq &> /dev/null; then
            echo "📦 Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
          fi
          
          # Try Numbers API with plain text first (more reliable)
          echo "🔍 Trying Numbers API (plain text)..."
          FACT=$(curl -s --max-time 10 --retry 2 "http://numbersapi.com/${{ steps.date.outputs.date_slash }}/date")
          
          # Validate plain text response
          if [ -n "$FACT" ] && [ "$FACT" != "null" ] && [[ ! "$FACT" =~ "does not exist" ]] && [[ ! "$FACT" =~ "Not Found" ]]; then
            echo "✅ Successfully fetched from Numbers API (plain text)"
          else
            echo "🔄 Trying Numbers API (JSON)..."
            FACT_JSON=$(curl -s --max-time 10 --retry 2 "http://numbersapi.com/${{ steps.date.outputs.date_slash }}/date?json")
            FACT=$(echo "$FACT_JSON" | jq -r '.text' 2>/dev/null || echo "")
            
            if [ -n "$FACT" ] && [ "$FACT" != "null" ] && [[ ! "$FACT" =~ "does not exist" ]]; then
              echo "✅ Successfully fetched from Numbers API (JSON)"
            else
              echo "🔄 Trying random date fact..."
              RANDOM_FACT=$(curl -s --max-time 10 "http://numbersapi.com/random/date")
              
              if [ -n "$RANDOM_FACT" ] && [ "$RANDOM_FACT" != "null" ] && [[ ! "$RANDOM_FACT" =~ "does not exist" ]]; then
                FACT="$RANDOM_FACT"
                echo "✅ Successfully fetched random date fact"
              else
                echo "❌ All APIs failed, using inspirational fallback"
                FACT="On ${{ steps.date.outputs.date_display }}, remember: every day brings new opportunities for learning and discovery! 💫"
              fi
            fi
          fi
          
          # Clean and format the fact
          FACT=$(echo "$FACT" | tr -d '\r' | sed 's/^"//' | sed 's/"$//')
          echo "📖 Final Fact: $FACT"
          
          # Escape for sed
          ESCAPED_FACT=$(printf '%s' "$FACT" | sed 's/[\/&]/\\&/g')
          echo "fact=$FACT" >> $GITHUB_OUTPUT
          echo "escaped_fact=$ESCAPED_FACT" >> $GITHUB_OUTPUT

      # Step 6: Update README file
      - name: 📝 Update README
        run: |
          echo "🔄 Updating README.md..."
          
          # Create backup
          cp README.md README.md.backup
          
          # Update the daily fact section
          if sed -i "s|<!-- DAILY_FACT -->.*|<!-- DAILY_FACT -->\n\`\`\`plaintext\n📌 Daily Fact: ${{ steps.fact.outputs.fact }}\n\`\`\`|" README.md; then
            echo "✅ README updated successfully"
            echo "📊 Change preview:"
            git diff README.md | head -10 || true
          else
            echo "❌ Failed to update README, restoring backup"
            mv README.md.backup README.md
            exit 1
          fi
          
          rm README.md.backup

      # Step 7: Commit and push changes
      - name: 🚀 Commit and Push Changes
        run: |
          echo "📦 Staging changes..."
          git add README.md
          
          if git diff --staged --quiet; then
            echo "✅ No changes to commit"
          else
            echo "💾 Committing changes..."
            git commit -m "📚 Update daily fact for ${{ steps.date.outputs.iso_date }}"
            
            echo "📤 Pushing to repository..."
            git fetch origin
            git merge origin/main --no-edit -m "Merge remote changes"
            git push origin main
            
            echo "🎉 Successfully updated daily fact!"
          fi

      # Step 8: Summary
      - name: 📋 Summary
        if: always()
        run: |
          echo " "
          echo "🏁 WORKFLOW SUMMARY"
          echo "===================="
          echo "📅 Date: ${{ steps.date.outputs.date_display }}"
          echo "📖 Fact: ${{ steps.fact.outputs.fact }}"
          echo "🕒 Time: $(date -u +'%H:%M:%S UTC')"
          echo "✅ Status: ${{ job.status }}"
          echo " "
